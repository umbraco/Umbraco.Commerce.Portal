@using Umbraco.Commerce.Portal.Extensions
@using Umbraco.Commerce.Portal.Models
@inject IUmbracoCommerceApi CommerceApi
@inherits UmbracoViewPage

@{
    Layout = "UmbracoCommercePortalManagementLayout.cshtml";

    Context.Request.Query.TryGetValue("orderId", out var orderId);

    var store = Model.GetStore();
    var portalContainerPage = Model.GetPortalContainerPage();

    var order = await CommerceApi.GetOrderAsync(Guid.Parse(orderId!));
    var orderStatus = await CommerceApi.GetOrderStatusAsync(order.OrderStatusId);
    var paymentMethod = await CommerceApi.GetPaymentMethodAsync(order.PaymentInfo.PaymentMethodId!.Value);
    var orderPropertyConfig = await CommerceApi.GetOrderPropertyConfigAsync(store.Alias);

    CustomerModel customerModel = order.GetCustomerModel(orderPropertyConfig);
    AddressModel billingAddressModel = order.GetBillingAddressModel(orderPropertyConfig);
    var orderBillingAddress = await order.GetBillingAddressAsync(orderPropertyConfig);
    billingAddressModel.Country = (await CommerceApi.GetCountryAsync(store.Id, orderBillingAddress.CountryIsoCode)).Name;
    AddressModel shippingAddressModel = order.GetShippingAddressModel(orderPropertyConfig);
    var orderShippingAddress = await order.GetShippingAddressAsync(orderPropertyConfig);
    shippingAddressModel.Country = (await CommerceApi.GetCountryAsync(store.Id, orderBillingAddress.CountryIsoCode)).Name;

    bool canCollectBillingInfo = portalContainerPage.Value<bool>("ucpCollectBillingInfo");
    bool canCollectShippingInfo = portalContainerPage.Value<bool>("ucpCollectShippingInfo");
}

<div class="order-details">

    @await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalOrderDetailsBack.cshtml")

    @await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalOrderDetailsHeader.cshtml", order)

    <div class="order-details__sections">
        <div class="order-details__section">
            <div class="order-details__section-title">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.OrderInfo.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.OrderInfo.DefaultValue)
            </div>
            <div class="order-details__field-row">
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.OrderDate.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.OrderDate.DefaultValue)
                    </span>
                    <div class="order-details__field-value">@order.FinalizedDate?.ToString("MMM, d yyyy")</div>
                </div>
            </div>
            <div class="order-details__field-row">
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Status.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Status.DefaultValue)
                    </span>
                    <div class="order-details__field-value">@orderStatus.Name</div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.PaymentStatus.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.PaymentStatus.DefaultValue)
                    </span>
                    <div class="order-details__field-value">@order.TransactionInfo.PaymentStatus</div>
                </div>
            </div>
            <div class="order-details__field">
                <span class="order-details__field-label">
                    @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.PaymentMethod.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.PaymentMethod.DefaultValue)
                </span>
                <div class="order-details__field-value">@paymentMethod.Name</div>
            </div>
        </div>

        <div class="order-details__section order-details__section--editable">
            <div class="order-details__section-title">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.Customer.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.Customer.DefaultValue)
            </div>
            <div id="customer-view">
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.Name.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.Name.DefaultValue) :
                    </span>
                    <div class="order-details__field-value">@($"{customerModel.FirstName} {customerModel.LastName}") </div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.Email.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.Email.DefaultValue) :
                    </span>
                    <div class="order-details__field-value">@customerModel.Email</div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.PhoneNumber.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.PhoneNumber.DefaultValue) :
                    </span>
                    <div class="order-details__field-value">@customerModel.Telephone</div>
                </div>
            </div>
        </div>

        <div class="order-details__section order-details__section--editable">
            <div class="order-details__section-title">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.Address.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.Address.DefaultValue) :
            </div>
            <div id="address-view">
                @if (canCollectBillingInfo)
                {
                    <div class="order-details__field">
                        <span class="order-details__field-label">
                            @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.BillingAddress.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.BillingAddress.DefaultValue) :
                        </span>
                        <div class="order-details__field-value">
                            @billingAddressModel.AddressLine1 @billingAddressModel.AddressLine2, @billingAddressModel.City @billingAddressModel.ZipCode @billingAddressModel.Country
                        </div>
                    </div>
                }
                @if (canCollectShippingInfo)
                {
                    <div class="order-details__field">
                        <span class="order-details__field-label">
                            @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.CustomerEntries.ShippingAddress.Key, UmbracoCommercePortalConstants.Localization.CustomerEntries.ShippingAddress.DefaultValue) :
                        </span>
                        <div class="order-details__field-value">
                            @shippingAddressModel.AddressLine1 @shippingAddressModel.AddressLine2, @shippingAddressModel.City @shippingAddressModel.ZipCode @shippingAddressModel.Country
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="order-details__products">
        @foreach (var orderLine in order.OrderLines)
        {
            var product = Umbraco.Content(Guid.Parse(orderLine.ProductReference));
            if (product != null)
            {
                var image = product.Value<IPublishedContent>("image");

                <div class="order-details__product">
                    <div class="order-details__product-image orders__product-image--placeholder" style="display: flex; justify-content: center; color: white; border-radius: 8px; overflow: hidden;">
                        @if (image != null)
                        {
                            <img src="@image.GetCropUrl(120, 120)" alt="@image.Name()" class="img-fluid" />
                        }
                    </div>
                    <div class="order-details__product-info">
                        <div class="order-details__product-name">@product.Name()</div>
                        <div class="order-details__product-quantity">
                            @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.ProductEntries.Quantity.Key, UmbracoCommercePortalConstants.Localization.ProductEntries.Quantity.DefaultValue): @orderLine.Quantity
                        </div>
                    </div>
                    <div class="order-details__product-price">@(await orderLine.UnitPrice.Value.FormattedAsync())</div>
                </div>
            }
        }
    </div>

    <div class="order-details__summary">
        <div class="order-details__summary-row">
            <span class="order-details__summary-label">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Subtotal.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Subtotal.DefaultValue)
            </span>
            <span class="order-details__summary-value">@(await order.SubtotalPrice.Value.FormattedAsync())</span>
        </div>
        @{
            var subtotalFeesAdjustment = order.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax > 0).Sum(order.CurrencyId);
            if (subtotalFeesAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.SubtotalFees.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.SubtotalFees.DefaultValue)
                    </span>
                    <span class="order-details__summary-value">@await subtotalFeesAdjustment.FormattedAsync(x => x.WithoutTax)</span>
                </div>
            }

            var subtotalDiscountAdjustment = order.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax < 0).Sum(order.CurrencyId);
            if (subtotalDiscountAdjustment < 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.SubtotalDiscount.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.SubtotalDiscount.DefaultValue)
                    </span>
                    <span class="order-details__summary-value">@await subtotalDiscountAdjustment.FormattedAsync(x => x.WithoutTax)</span>
                </div>
            }
        }
        <div class="order-details__summary-row">
            <span class="order-details__summary-label">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Taxes.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Taxes.DefaultValue)
            </span>
            <span class="order-details__summary-value">@(await order.TotalPrice.Value.FormattedAsync(x => x.Tax))</span>
        </div>
        @{
            var totalFeesAdjustment = order.TotalPrice.Adjustments.Where(x => x.Price.WithTax > 0).Sum(order.CurrencyId);
            if (totalFeesAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.NetTotalFees.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.NetTotalFees.DefaultValue)
                    </span>
                    <span class="order-details__summary-value">@(await totalFeesAdjustment.FormattedAsync(x => x.WithoutTax))</span>
                </div>
            }

            var totalDiscountAdjustment = order.TotalPrice.Adjustments.Where(x => x.Price.WithTax < 0).Sum(order.CurrencyId);
            if (totalDiscountAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.NetTotalDiscount.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.NetTotalDiscount.DefaultValue)
                    </span>
                    <span class="order-details__summary-value">@(await totalDiscountAdjustment.FormattedAsync(x => x.WithoutTax))</span>
                </div>
            }
        }
        <div class="order-details__summary-row order-details__summary-row--total">
            <span class="order-details__summary-label">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Total.Key, UmbracoCommercePortalConstants.Localization.OrderInfoEntries.Total.DefaultValue)
            </span>
            <span class="order-details__summary-value">@(await order.TotalPrice.Value.FormattedAsync())</span>
        </div>
    </div>
</div>
