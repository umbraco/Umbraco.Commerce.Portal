@using Umbraco.Commerce.Portal.Extensions
@using Umbraco.Commerce.Portal.Models
@inject IUmbracoCommerceApi CommerceApi
@inherits UmbracoViewPage

@{
    Layout = "UmbracoCommercePortalManagementLayout.cshtml";

    Context.Request.Query.TryGetValue("orderId", out var orderId);

    var store = Model.GetStore();

    var order = await CommerceApi.GetOrderAsync(Guid.Parse(orderId!));
    var orderStatus = await CommerceApi.GetOrderStatusAsync(order.OrderStatusId);
    var paymentMethod = await CommerceApi.GetPaymentMethodAsync(order.PaymentInfo.PaymentMethodId!.Value);
    var orderPropertyConfig = await CommerceApi.GetOrderPropertyConfigAsync(store.Alias);

    CustomerModel customerModel = order.GetCustomerModel();
    AddressModel billingAddressModel = order.GetBillingAddressModel();
    var orderBillingAddress = await order.GetBillingAddressAsync(orderPropertyConfig);
    billingAddressModel.Country = (await CommerceApi.GetCountryAsync(store.Id, orderBillingAddress.CountryIsoCode)).Name;
    AddressModel shippingAddressModel = order.GetShippingAddressModel();
    var orderShippingAddress = await order.GetShippingAddressAsync(orderPropertyConfig);
    shippingAddressModel.Country = (await CommerceApi.GetCountryAsync(store.Id, orderBillingAddress.CountryIsoCode)).Name;
}

<div class="order-details">

    @await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalOrderDetailsBack.cshtml")

    @await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalOrderDetailsHeader.cshtml", order)

    <div class="order-details__sections">
        <div class="order-details__section">
            <div class="order-details__section-title">Order Info</div>
            <div class="order-details__field-row">
                <div class="order-details__field">
                    <span class="order-details__field-label">Order Date</span>
                    <div class="order-details__field-value">@order.FinalizedDate?.ToString("MMM, d yyyy")</div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">Delivery Date</span>
                    <div class="order-details__field-value"></div>
                </div>
            </div>
            <div class="order-details__field-row">
                <div class="order-details__field">
                    <span class="order-details__field-label">Status</span>
                    <div class="order-details__field-value">@orderStatus.Name</div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">Payment Status</span>
                    <div class="order-details__field-value">@order.TransactionInfo.PaymentStatus</div>
                </div>
            </div>
            <div class="order-details__field">
                <span class="order-details__field-label">Payment Method</span>
                <div class="order-details__field-value">@paymentMethod.Name</div>
            </div>
        </div>

        <div class="order-details__section order-details__section--editable">
            <div class="order-details__section-title">
                Customer
                <button class="order-details__edit-button" onclick="editCustomer(true)">
                    <svg class="order-details__edit-icon" viewBox="0 0 24 24">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                    </svg>
                </button>
            </div>
            <div id="customer-view">
                <div class="order-details__field">
                    <span class="order-details__field-label">Name :</span>
                    <div class="order-details__field-value">@($"{customerModel.FirstName} {customerModel.LastName}") </div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">Email :</span>
                    <div class="order-details__field-value">@customerModel.Email</div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">Phone number :</span>
                    <div class="order-details__field-value">@customerModel.Telephone</div>
                </div>
            </div>
            <div id="customer-edit" style="display: none">
                @using (Html.BeginUmbracoForm("UpdateCustomer", "UmbracoCommercePortalOrderSurface"))
                {
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@customerModel.FirstName">First Name:</span>
                        <input type="text" class="order-details__field-input" asp-for="@customerModel.FirstName" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@customerModel.LastName">Last Name:</span>
                        <input type="text" class="order-details__field-input" asp-for="@customerModel.LastName" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@customerModel.Email">Email :</span>
                        <input type="email" class="order-details__field-input" asp-for="@customerModel.Email" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@customerModel.Telephone">Phone number :</span>
                        <input type="tel" class="order-details__field-input" asp-for="@customerModel.Telephone" />
                    </div>
                    <div class="order-details__error">
                        @Html.ValidationSummary()
                    </div>
                    <div class="order-details__edit-actions">
                        <button type="submit" class="button button--primary button--small" style="margin-right: 8px;">Save</button>
                        <button type="button" class="button button--secondary button--small" onclick="editCustomer(false)">Cancel</button>
                    </div>
                }

            </div>
        </div>

        <div class="order-details__section order-details__section--editable">
            <div class="order-details__section-title">
                Address
            </div>
            <div id="address-view">
                <div class="order-details__field">
                    <span class="order-details__field-label">Billing Address :</span>
                    <div class="order-details__field-value">
                        @billingAddressModel.AddressLine1 @billingAddressModel.AddressLine2, @billingAddressModel.City @billingAddressModel.ZipCode @billingAddressModel.Country
                        <button class="order-details__edit-button" onclick="editAddress(true, true)">
                            <svg class="order-details__edit-icon" viewBox="0 0 24 24">
                                <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="order-details__field">
                    <span class="order-details__field-label">Shipping Address :</span>
                    <div class="order-details__field-value">
                        @shippingAddressModel.AddressLine1 @shippingAddressModel.AddressLine2, @shippingAddressModel.City @shippingAddressModel.ZipCode @shippingAddressModel.Country
                        <button class="order-details__edit-button" onclick="editAddress(true, false)">
                            <svg class="order-details__edit-icon" viewBox="0 0 24 24">
                                <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            @using (Html.BeginUmbracoForm("UpdateBillingAddress", "UmbracoCommercePortalOrderSurface"))
            {
                <div id="billing-address-edit" style="display: none;">
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@billingAddressModel.AddressLine1">Address Line 1 :</span>
                        <input type="text" class="order-details__field-input" asp-for="@billingAddressModel.AddressLine1" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@billingAddressModel.AddressLine2">Address Line 2 :</span>
                        <input type="text" class="order-details__field-input" asp-for="@billingAddressModel.AddressLine2" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@billingAddressModel.City">City :</span>
                        <input type="text" class="order-details__field-input" asp-for="@billingAddressModel.City" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@billingAddressModel.ZipCode">Zip Code :</span>
                        <input type="text" class="order-details__field-input" asp-for="@billingAddressModel.ZipCode" />
                    </div>
                    <div class="order-details__error">
                        @Html.ValidationSummary()
                    </div>
                    <div class="order-details__edit-actions">
                        <button type="submit" class="button button--primary button--small" style="margin-right: 8px;">Save</button>
                        <button type="button" class="button button--secondary button--small" onclick="editAddress(false, true)">Cancel</button>
                    </div>
                </div>
            }
            @using (Html.BeginUmbracoForm("UpdateShippingAddress", "UmbracoCommercePortalOrderSurface"))
            {
                <div id="shipping-address-edit" style="display: none;">
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@shippingAddressModel.AddressLine1">Address Line 1 :</span>
                        <input type="text" class="order-details__field-input" asp-for="@shippingAddressModel.AddressLine1" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@shippingAddressModel.AddressLine2">Address Line 2 :</span>
                        <input type="text" class="order-details__field-input" asp-for="@shippingAddressModel.AddressLine2" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@shippingAddressModel.City">City :</span>
                        <input type="text" class="order-details__field-input" asp-for="@shippingAddressModel.City" />
                    </div>
                    <div class="order-details__field">
                        <span class="order-details__field-label" asp-for="@shippingAddressModel.ZipCode">Zip Code :</span>
                        <input type="text" class="order-details__field-input" asp-for="@shippingAddressModel.ZipCode" />
                    </div>
                    <div class="order-details__error">
                        @Html.ValidationSummary()
                    </div>
                    <div class="order-details__edit-actions">
                        <button type="submit" class="button button--primary button--small" style="margin-right: 8px;">Save</button>
                        <button type="button" class="button button--secondary button--small" onclick="editAddress(false, false)">Cancel</button>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="order-details__products">
        @foreach (var orderLine in order.OrderLines)
        {
            var product = Umbraco.Content(Guid.Parse(orderLine.ProductReference));
            if (product != null)
            {
                var image = product.Value<IPublishedContent>("image");

                <div class="order-details__product">
                    <div class="order-details__product-image" style="display: flex; justify-content: center; color: white; border-radius: 8px; overflow: hidden;">
                        <img src="@image.GetCropUrl(120, 120)" alt="@image.Name()" class="img-fluid" />
                    </div>
                    <div class="order-details__product-info">
                        <div class="order-details__product-name">@product.Name()</div>
                        <div class="order-details__product-quantity">Quantity: @orderLine.Quantity</div>
                    </div>
                    <div class="order-details__product-price">@(await orderLine.UnitPrice.Value.FormattedAsync())</div>
                </div>
            }
        }
    </div>

    <div class="order-details__summary">
        <div class="order-details__summary-row">
            <span class="order-details__summary-label">Subtotal</span>
            <span class="order-details__summary-value">@(await order.SubtotalPrice.Value.FormattedAsync())</span>
        </div>
        @{
            var subtotalFeesAdjustment = order.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax > 0).Sum(order.CurrencyId);
            if (subtotalFeesAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">Subtotal Fees</span>
                    <span class="order-details__summary-value">@await subtotalFeesAdjustment.FormattedAsync(x => x.WithoutTax)</span>
                </div>
            }

            var subtotalDiscountAdjustment = order.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax < 0).Sum(order.CurrencyId);
            if (subtotalDiscountAdjustment < 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">Subtotal Discount</span>
                    <span class="order-details__summary-value">@await subtotalDiscountAdjustment.FormattedAsync(x => x.WithoutTax)</span>
                </div>
            }
        }
        <div class="order-details__summary-row">
            <span class="order-details__summary-label">Taxes</span>
            <span class="order-details__summary-value">@(await order.TotalPrice.Value.FormattedAsync(x => x.Tax))</span>
        </div>
        @{
            var totalFeesAdjustment = order.TotalPrice.Adjustments.Where(x => x.Price.WithTax > 0).Sum(order.CurrencyId);
            if (totalFeesAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">Net Total Fees</span>
                    <span class="order-details__summary-value">@(await totalFeesAdjustment.FormattedAsync(x => x.WithoutTax))</span>
                </div>
            }

            var totalDiscountAdjustment = order.TotalPrice.Adjustments.Where(x => x.Price.WithTax < 0).Sum(order.CurrencyId);
            if (totalDiscountAdjustment > 0)
            {
                <div class="order-details__summary-row">
                    <span class="order-details__summary-label">Net Total Discount</span>
                    <span class="order-details__summary-value">@(await totalDiscountAdjustment.FormattedAsync(x => x.WithoutTax))</span>
                </div>
            }
        }
        <div class="order-details__summary-row order-details__summary-row--total">
            <span class="order-details__summary-label">Total</span>
            <span class="order-details__summary-value">@(await order.TotalPrice.Value.FormattedAsync())</span>
        </div>
    </div>
</div>

<script>
    function editCustomer(enableEditMode) {
        document.getElementById("customer-view").style.display = enableEditMode ? "none" : "block";
        document.getElementById("customer-edit").style.display = enableEditMode ? "block" : "none";
    }
    function editAddress(enableEditMode, isBilling) {
        const prefix = isBilling ? "billing" : "shipping";
        document.getElementById("address-view").style.display = enableEditMode ? "none" : "block";
        document.getElementById(prefix + "-address-edit").style.display = enableEditMode ? "block" : "none";
    }
</script>

@* Toast Notifications *@
@if (TempData["UpdateCustomerSuccess"] != null)
{
    @await Html.PartialAsync(
    $"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalToast.cshtml",
        new ToastModel("success", TempData["UpdateCustomerSuccess"].ToString()))
}

@if (TempData["UpdateAddressSuccess"] != null)
{
    @await Html.PartialAsync(
    $"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalToast.cshtml",
        new ToastModel("success", TempData["UpdateAddressSuccess"].ToString()))
}

@if (TempData["UpdateCustomerError"] != null)
{
    <script>
        editCustomer(true);
    </script>
}

@if (TempData["UpdateAddressError"] != null)
{
    <script>
        editAddress(true);
    </script>
}

