@using Umbraco.Commerce.Portal.Extensions;
@using Umbraco.Commerce.Portal.Models;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
@inherits UmbracoViewPage
@{
    Layout = "UmbracoCommercePortalAuthLayout.cshtml";

    var loginPage = Model.GetPortalContainerPage(
        UmbracoCommercePortalConstants.ContentTypes.Aliases.PortalAuthPage,
        UmbracoCommercePortalConstants.ContentNodes.PortalAuthLoginPageNodeName);

    var resetPasswordModel = new ResetPasswordModel();

    var updatePasswordModel = new UpdatePasswordModel();
    var key = HttpContextAccessor?.HttpContext?.Request.Query["key"].ToString();
    if (!string.IsNullOrEmpty(key))
    {
        updatePasswordModel.MemberId = Guid.Parse(key);
    }
}

<h2 class="auth__title">
    @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.ResetPassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.ResetPassword.DefaultValue)
</h2>

@if (!string.IsNullOrEmpty(key))
{
    <p class="auth__description">
        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.EnterNewPassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.EnterNewPassword.DefaultValue)
    </p>

    @using (Html.BeginUmbracoForm("UpdatePassword", "UmbracoCommercePortalSurface", FormMethod.Post, new { @class = "auth__form" }))
    {
        <input type="hidden" asp-for="@updatePasswordModel.MemberId" />

        <div class="auth__field">
            <label class="auth__label" asp-for="@updatePasswordModel.Password">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.Password.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.Password.DefaultValue)
            </label>
            <input class="auth__input" asp-for="@updatePasswordModel.Password" type="password" autocomplete="off" />
        </div>

        <div class="auth__field">
            @Html.ValidationSummary()
        </div>

        @if (TempData["UpdatePasswordSuccess"] != null)
        {
            <text>
                <p class="auth__signin">
					<a class="auth__link ucp-text-color" href="@(loginPage != null ? loginPage.Url() : "#")">
                        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.LogIn.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.LogIn.DefaultValue)
                    </a>
                </p>
            </text>
            @await Html.PartialAsync(
            $"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalToast.cshtml",
                new ToastModel("success", TempData["UpdatePasswordSuccess"].ToString()))
        }
        else
        {
			<button class="auth__button ucp-bg-color" type="submit">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.UpdatePassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.UpdatePassword.DefaultValue)
            </button>
        }
    }
}
else
{
    <p class="auth__description">
        @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.EnterEmailForResetPassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.EnterEmailForResetPassword.DefaultValue)
    </p>

    @using (Html.BeginUmbracoForm("ResetPassword", "UmbracoCommercePortalSurface", FormMethod.Post, new { @class = "auth__form" }))
    {
        <div class="auth__field">
            <label class="auth__label" asp-for="@resetPasswordModel.Email">
                @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.EnterEmailForResetPassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.EmailAddress.DefaultValue)
            </label>
            <input class="auth__input" asp-for="@resetPasswordModel.Email" />
        </div>

        <div class="auth__field">
            <div class="auth__error">
                @Html.ValidationSummary()
            </div>
        </div>

		<button class="auth__button ucp-bg-color" type="submit">
            @Umbraco.GetDictionaryValueOrDefault(UmbracoCommercePortalConstants.Localization.AuthEntries.ResetPassword.Key, UmbracoCommercePortalConstants.Localization.AuthEntries.ResetPassword.DefaultValue)
        </button>

        @if (TempData["Success"] != null)
        {
            @await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalToast.cshtml", new ToastModel("success", TempData["Success"].ToString()))
        }
    }
}

@await Html.PartialAsync($"{UmbracoCommercePortalConstants.UmbracoCommercePortalViewPath}/Partials/UmbracoCommercePortalSignUp.cshtml")
